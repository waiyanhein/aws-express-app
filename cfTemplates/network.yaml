AWSTemplateFormatVersion: "2010-09-09"
Description: "Network stack"
Parameters:
  AppPort:
    Default: '3000'
    Type: String
  AZa:
    Default: 'eu-west-2a'
    Type: String
  AZb:
    Default: 'eu-west-2b'
    Type: String
  Region:
    Default: 'eu-west-2'
    Type: String
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Join ["-", [ !Ref AWS::StackName, "VPC" ]]
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/18
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Ref AZa
      Tags:
        - Key: Name
          Value: !Join ["-", [ !Ref AWS::StackName, "PublicSubnetA" ]]
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.64.0/18
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Ref AZb
      Tags:
        - Key: Name
          Value: !Join ["-", [ !Ref AWS::StackName, "PublicSubnetB" ]]
  ApiPrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.128.0/19
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Ref AZa
      Tags:
        - Key: Name
          Value: !Join ["-", [ !Ref AWS::StackName, "ApiPrivateSubnetA" ]]
  ApiPrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.160.0/19
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Ref AZb
      Tags:
        - Key: Name
          Value: !Join ["-", [ !Ref AWS::StackName, "ApiPrivateSubnetB" ]]
  DatabasePrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.192.0/19
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Ref AZa
      Tags:
        - Key: Name
          Value: !Join ["-", [ !Ref AWS::StackName, "DatabasePrivateSubnetA" ]]
  DatabasePrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.224.0/19
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Ref AZb
      Tags:
        - Key: Name
          Value: !Join ["-", [ !Ref AWS::StackName, "DatabasePrivateSubnetB" ]]
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-", [ !Ref AWS::StackName, "InternetGateway" ]]
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ["-", [ !Ref AWS::StackName, "PublicRouteTable" ]]
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicRouteTablePublicSubnetAAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicRouteTablePublicSubnetBAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB
  ElasticIpA:
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-", [ !Ref AWS::StackName, "ElasticIpA" ]]
  ElasticIpB:
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-", [ !Ref AWS::StackName, "ElasticIpB" ]]
  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnetA
#      ConnectivityType: public
      AllocationId: !GetAtt ElasticIpA.AllocationId
      Tags:
        - Key: Name
          Value: !Join ["-", [ !Ref AWS::StackName, "NatGatewayA" ]]
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ["-", [ !Ref AWS::StackName, "PrivateRouteTableA" ]]
  PrivateRouteAForNatA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA
  PrivateRouteTableAPrivateSubnetAAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref ApiPrivateSubnetA
  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnetB
      AllocationId: !GetAtt ElasticIpB.AllocationId
      Tags:
        - Key: Name
          Value: !Join ["-", [ !Ref AWS::StackName, "NatGatewayB" ]]
  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ["-", [ !Ref AWS::StackName, "PrivateRouteTableB" ]]
  PrivateRouteBForNatB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB
  PrivateRouteTableBPrivateSubnetBAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref ApiPrivateSubnetB
  AsgSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Security group for the ASG, ALB and private EC2 instances as well as SSH access
        VpcId: !Ref VPC
        SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: '80'
              ToPort: '80'
              CidrIp: 0.0.0.0/0
            - IpProtocol: tcp
              FromPort: '443'
              ToPort: '443'
              CidrIp: 0.0.0.0/0
            - IpProtocol: tcp
              FromPort: '22'
              ToPort: '22'
              CidrIp: 0.0.0.0/0
              Description: SSH access from anywhere
            - IpProtocol: tcp
              FromPort: !Ref AppPort
              ToPort: !Ref AppPort
              CidrIp: 0.0.0.0/0
        Tags:
            - Key: Name
              Value: !Join ["-", [ !Ref AWS::StackName, "AsgSecurityGroup" ]]
Outputs:
    Vpc:
        Description: VPC
        Value: !Ref VPC
        Export:
          Name: !Join ["-", [ !Ref AWS::StackName, "Vpc" ]]
    PublicSubnetA:
        Description: PublicSubnetA
        Value: !Ref PublicSubnetA
        Export:
          Name: !Join ["-", [ !Ref AWS::StackName, "PublicSubnetA" ]]
    PublicSubnetB:
        Description: PublicSubnetB
        Value: !Ref PublicSubnetB
        Export:
          Name: !Join ["-", [ !Ref AWS::StackName, "PublicSubnetB" ]]
    ApiPrivateSubnetA:
        Description: ApiPrivateSubnetA
        Value: !Ref ApiPrivateSubnetA
        Export:
          Name: !Join ["-", [ !Ref AWS::StackName, "ApiPrivateSubnetA" ]]
    ApiPrivateSubnetB:
        Description: ApiPrivateSubnetB
        Value: !Ref ApiPrivateSubnetB
        Export:
          Name: !Join ["-", [ !Ref AWS::StackName, "ApiPrivateSubnetB" ]]
    DatabasePrivateSubnetA:
        Description: DatabasePrivateSubnetA
        Value: !Ref DatabasePrivateSubnetA
        Export:
          Name: !Join ["-", [ !Ref AWS::StackName, "DatabasePrivateSubnetA" ]]
    DatabasePrivateSubnetB:
        Description: DatabasePrivateSubnetB
        Value: !Ref DatabasePrivateSubnetB
        Export:
          Name: !Join ["-", [ !Ref AWS::StackName, "DatabasePrivateSubnetB" ]]
    AsgSecurityGroup:
        Description: AsgSecurityGroup
        Value: !Ref AsgSecurityGroup
        Export:
          Name: !Join ["-", [ !Ref AWS::StackName, "AsgSecurityGroup" ]]
